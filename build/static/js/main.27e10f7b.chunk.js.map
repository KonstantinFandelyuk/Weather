{"version":3,"sources":["api/apiWeather.ts","store/dataStore.ts","components/helpers/timeWork.ts","components/Widget/LeftSide/index.tsx","components/Widget/RightSide/WeatherInfo/index.tsx","components/Widget/RightSide/DaysList/DaysListItem/index.tsx","components/Widget/RightSide/DaysList/index.tsx","components/Widget/RightSide/index.tsx","components/Widget/index.tsx","components/Loader/index.tsx","App.tsx","index.tsx"],"names":["fetchForecast","a","search","axios","get","process","console","log","fetchSearch","loading","currentCity","currentWeather","locationInfo","dataForecast","searchList","searchText","isShowList","makeAutoObservable","this","getCurrentWeather","action","bound","getSearchList","inputSearch","submitSearchCity","updateCurrentCity","value","isLoading","response","data","current","location","forecast","forecastday","getCurrentDate","day","Date","getDate","month","getMonth","year","getFullYear","geCurrentDay","reduction","getDay","getDayAndMonth","toLocaleString","slice","LeftSide","observer","dataStore","className","name","country","src","condition","icon","alt","temp_c","text","WeatherInfo","type","id","placeholder","onChange","e","target","htmlFor","onClick","map","item","i","nanoid","precip_mm","humidity","wind_mph","wind_dir","feelslike_c","DaysListItem","date","Math","round","avgtemp_c","DaysList","RightSide","Widget","last_updated","Loader","App","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27e10f7b.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const fetchForecast = async (search: string = 'kiev') => {\n  try {\n    return await axios.get(\n      `${process.env.REACT_APP_API}/forecast.json?key=${process.env.REACT_APP_API_KEY}&q=${search}&lang=en&days=3`,\n    );\n  } catch (error) {\n    console.log(`error`, error);\n  }\n};\n\n// export const testApi = async (latitude: number, longitude: number) => {\n//   try {\n//     return await axios.get(\n//       `https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=${process.env.REACT_APP_GOOGLE_API_KEY}`,\n//     );\n//   } catch (error) {\n//     console.log(`error`, error);\n//   }\n// };\n\n// export const testApi = async (latitude: number, longitude: number) => {\n//   try {\n//     const response = await fetch(\n//       `https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=${process.env.REACT_APP_GOOGLE_API_KEY}`,\n//     );\n//     return await response.json();\n//   } catch (error) {\n//     console.log('error :>> ', error);\n//   }\n// };\n// /search.json\n\nexport const fetchSearch = async (search: string) => {\n  try {\n    return await axios.get(\n      `${process.env.REACT_APP_API}/search.json?key=${process.env.REACT_APP_API_KEY}&q=${search}`,\n    );\n  } catch (error) {\n    console.log(`error`, error);\n  }\n};\n","import { IData, ILocation, ISearchData } from './../types/types';\nimport { makeAutoObservable, action } from 'mobx';\nimport { fetchForecast, fetchSearch } from '../api/apiWeather';\n// import { toJS } from 'mobx';\n\nclass dataStore {\n  loading: boolean = false;\n  currentCity: string = 'Kiev';\n  currentWeather?: IData;\n  locationInfo?: ILocation;\n  dataForecast = [];\n  searchList?: ISearchData[];\n  searchText: string = '';\n  isShowList: boolean = false;\n\n  constructor() {\n    makeAutoObservable(this, {\n      getCurrentWeather: action.bound,\n      getSearchList: action.bound,\n      inputSearch: action.bound,\n      submitSearchCity: action.bound,\n      updateCurrentCity: action.bound,\n    });\n  }\n\n  isLoading(value: boolean) {\n    this.loading = value;\n  }\n\n  inputSearch(value: string) {\n    this.searchText = value;\n  }\n\n  submitSearchCity() {\n    this.getSearchList(this.searchText);\n    this.isShowList = true;\n    this.searchText = '';\n  }\n\n  updateCurrentCity(value: string) {\n    this.currentCity = value;\n    this.getCurrentWeather();\n    this.isShowList = false;\n    this.searchList = [];\n  }\n\n  async getCurrentWeather() {\n    this.isLoading(true);\n    const response = await fetchForecast(this.currentCity);\n    if (response) {\n      this.currentWeather = response.data.current;\n      this.locationInfo = response.data.location;\n      this.dataForecast = response.data.forecast.forecastday;\n      this.isLoading(false);\n    }\n  }\n\n  async getSearchList(value: string) {\n    this.isLoading(true);\n    const response = await fetchSearch(value);\n    if (response) {\n      this.searchList = response.data;\n      this.isLoading(false);\n    }\n  }\n}\nexport default new dataStore();\n","export const getCurrentDate = () => {\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const day = new Date().getDate();\n  const month = new Date().getMonth();\n  const year = new Date().getFullYear();\n  return `${day} ${monthNames[month]} ${year}`;\n};\nexport const geCurrentDay = (value: string, reduction: boolean) => {\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const smallDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  if (reduction) {\n    return smallDays[new Date(value).getDay()];\n  } else {\n    return days[new Date().getDay()];\n  }\n};\n\nexport const getDayAndMonth = (value: string) => new Date(value).toLocaleString().slice(0, 5);\n","import React, { FC } from 'react';\n// import { getMeIcon } from '../../helpers/iconHelpers';\nimport { getCurrentDate, geCurrentDay } from '../../helpers/timeWork';\nimport dataStore from '../../../store/dataStore';\nimport { observer } from 'mobx-react-lite';\nimport './style.scss';\nimport { toJS } from 'mobx';\n\nexport const LeftSide: FC = observer(() => {\n  const { currentWeather, locationInfo } = dataStore;\n  return (\n    <div className=\"leftSide\">\n      <div className=\"dateContainer\">\n        <span className=\"day\">\n          {geCurrentDay('', false)}\n          <span className=\"date\">{getCurrentDate()}</span>\n        </span>\n        <span className=\"location\">\n          {locationInfo?.name}, {locationInfo?.country}\n        </span>\n      </div>\n\n      <div className=\"LilInfoContainer\">\n        <span className=\"WeatherIcon\">\n          <img src={currentWeather?.condition.icon} alt=\"pic weather\" />\n          {/* {data && <img src={getMeIcon(data?.condition.text)} alt=\"img\" />} */}\n        </span>\n        <span className=\"MainDeg\">{currentWeather?.temp_c}°</span>\n        <span className=\"Description\">{currentWeather?.condition.text}</span>\n      </div>\n    </div>\n  );\n});\n","import React, { FC } from 'react';\nimport { nanoid } from 'nanoid';\nimport './style.scss';\nimport dataStore from '../../../../store/dataStore';\nimport { observer } from 'mobx-react-lite';\n\nexport const WeatherInfo: FC = observer(() => {\n  const {\n    currentWeather,\n    searchList,\n    inputSearch,\n    updateCurrentCity,\n    submitSearchCity,\n    isShowList,\n  } = dataStore;\n  return (\n    <div className=\"weather-info\">\n      <div className=\"header\">\n        <div>Some info</div>\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            id=\"search\"\n            placeholder=\" \"\n            onChange={(e) => inputSearch(e.target.value)}\n          />\n          <label htmlFor=\"search\"> Search City</label>\n          <button type=\"button\" onClick={() => submitSearchCity()}></button>\n        </div>\n      </div>\n      {isShowList ? (\n        <div className=\"city\">\n          <ul className=\"city__list\">\n            {searchList &&\n              searchList?.map((item, i) => (\n                <li\n                  key={nanoid()}\n                  onClick={() => updateCurrentCity(item.name)}\n                  className=\"city__list-item\"\n                >\n                  {i + 1}. {item.name}\n                </li>\n              ))}\n          </ul>\n        </div>\n      ) : (\n        <div className=\"cards\">\n          <div className=\"cards-item\">\n            <span>Precipitation</span>\n            <span>{currentWeather?.precip_mm}mm</span>\n          </div>\n          <div className=\"cards-item\">\n            <span>Humidity</span>\n            <span>{currentWeather?.humidity}%</span>\n          </div>\n          <div className=\"cards-item\">\n            <span>Wind</span>\n            <span>{currentWeather?.wind_mph}ms</span>\n          </div>\n          <div className=\"cards-item\">\n            <span>Dir of the wind</span>\n            <span>{currentWeather?.wind_dir}</span>\n          </div>\n          <div className=\"cards-item\">\n            <span>Feels</span>\n            <span>{currentWeather?.feelslike_c}°C</span>\n          </div>\n          <div className=\"cards-item\">\n            <span>Lowest</span>\n            <span>22°</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import React, { FC } from 'react';\nimport { IForecastItem } from '../../../../../types/types';\n// import { getMeIcon } from '../../../../helpers/iconHelpers';\nimport { geCurrentDay, getDayAndMonth } from '../../../../helpers/timeWork';\n\ninterface ItemProps {\n  item: IForecastItem;\n}\n\nexport const DaysListItem: FC<ItemProps> = ({ item }) => {\n  return (\n    <li className=\"forecastDay\">\n      <img src={item?.day.condition.icon} alt=\"pic weather\" />\n      <span className=\"forecastDay-Day\">\n        {getDayAndMonth(item.date)}, {geCurrentDay(item.date, true)}\n      </span>\n      <span className=\"forecastDay-Temp\">{Math.round(item.day.avgtemp_c)}°C</span>\n    </li>\n  );\n};\n","import React, { FC } from 'react';\nimport { DaysListItem } from './DaysListItem';\nimport { nanoid } from 'nanoid';\nimport { IForecastItem } from '../../../../types/types';\nimport dataStore from '../../../../store/dataStore';\nimport { observer } from 'mobx-react-lite';\nimport './style.scss';\n\nexport const DaysList: FC = observer(() => {\n  const { dataForecast } = dataStore;\n  return (\n    <ul className=\"forecastDayList\">\n      {dataForecast.map((item: IForecastItem) => (\n        <DaysListItem item={item} key={nanoid()} />\n      ))}\n    </ul>\n  );\n});\n","import React, { FC } from 'react';\nimport { WeatherInfo } from './WeatherInfo';\nimport { DaysList } from './DaysList';\nimport './style.scss';\n\nexport const RightSide: FC = () => {\n  return (\n    <div className=\"RightSide\">\n      <WeatherInfo />\n      <DaysList />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport dataStore from '../../store/dataStore';\nimport { getDayAndMonth } from '../helpers/timeWork';\nimport { LeftSide } from './LeftSide';\nimport { RightSide } from './RightSide';\nimport { observer } from 'mobx-react-lite';\nimport './style.scss';\n\nexport const Widget: FC = observer(() => {\n  const { currentWeather } = dataStore;\n  return (\n    <div className=\"widget\">\n      <LeftSide />\n      <RightSide />\n      {currentWeather && (\n        <div className=\"last-update\">\n          Last update: {getDayAndMonth(currentWeather?.last_updated)}\n        </div>\n      )}\n    </div>\n  );\n});\n","import React, { FC } from 'react';\nimport './style.scss';\n\nexport const Loader: FC = () => {\n  return (\n    <div className=\"loaders\">\n      <div className=\"container\">\n        <div className=\"loader\">\n          <div className=\"loader--dot\"></div>\n          <div className=\"loader--dot\"></div>\n          <div className=\"loader--dot\"></div>\n          <div className=\"loader--dot\"></div>\n          <div className=\"loader--dot\"></div>\n          <div className=\"loader--dot\"></div>\n          <div className=\"loader--text\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { FC, useEffect } from 'react';\nimport { Widget } from './components/Widget';\nimport { Loader } from './components/Loader';\nimport { observer } from 'mobx-react-lite'; // Or \"mobx-react\".\nimport dataStore from './store/dataStore';\n\nexport const App: FC = observer(() => {\n  const { getCurrentWeather, loading } = dataStore;\n\n  useEffect(() => {\n    getCurrentWeather();\n  }, []);\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"container\">{!loading ? <Widget /> : <Loader />}</div>\n    </div>\n  );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}